{"version":3,"sources":["About.jsx","Contact.jsx","Error.jsx","Navbar.jsx","User.jsx","SearchResult.jsx","Search.jsx","App.js","serviceWorker.js","index.js"],"names":["About","props","name","Contact","Error","history","useHistory","onClick","push","href","src","alt","exact","activeClassName","to","Navbar","className","User","porps","useParams","fname","lname","loc","useLocation","console","log","greet","pathname","goBack","SearchResult","myimg","searchString","Search","useState","img","setImg","type","placeholder","value","onChange","event","target","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.48986b62.chunk.js","sourcesContent":["import React from \"react\";\n\nconst About = (props) => {\n  return <h1> About {props.name}</h1>;\n};\n\nexport default About;\n","import React from \"react\";\n\nconst Contact = (props) => {\n  return <h1> Contact {props.name}</h1>;\n};\n\nexport default Contact;\n","import React from \"react\";\nimport { useHistory, NavLink } from \"react-router-dom\";\n\nconst Error = () => {\n  const history = useHistory();\n  return (\n    <>\n      <button onClick={() => history.push(\"/\")}> Home</button>\n      <br />\n      <a href=\"/\" onClick={() => history.push(\"/\")}>\n        <img\n          src=\"https://www.cdgi.com/wp-content/uploads/2019/05/404-Pages-1112x556.jpg\"\n          alt=\"404\"\n        />\n      </a>\n      <a href=\"/\">\n        <img\n          src=\"https://i2.wp.com/learn.onemonth.com/wp-content/uploads/2017/08/1-10.png?fit=845%2C503&ssl=1\"\n          alt=\"404\"\n        />\n        <NavLink exact activeClassName=\"active_class\" to=\"/\">\n          Home\n        </NavLink>\n      </a>\n    </>\n  );\n};\n\nexport default Error;\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nconst Navbar = () => {\n  return (\n    <>\n      <div className=\"menu_style\">\n        <NavLink exact activeClassName=\"active_class\" to=\"/\">\n          Home\n        </NavLink>\n        <NavLink exact activeClassName=\"active_class\" to=\"/user\">\n          User\n        </NavLink>\n        <NavLink exact activeClassName=\"active_class\" to=\"/search\">\n          Search\n        </NavLink>\n        <NavLink exact activeClassName=\"active_class\" to=\"/about\">\n          AboutUs\n        </NavLink>\n        <NavLink exact activeClassName=\"active_class\" to=\"/contact\">\n          ContactUS\n        </NavLink>\n        {/* <a href=\"/\"> Home </a>\n        <a href=\"/about\"> AboutUS </a>\n        <a href=\"/contact\"> ContactUS </a> */}\n      </div>\n    </>\n  );\n};\n\nexport default Navbar;\n","import React from \"react\";\nimport { useParams, useLocation, useHistory } from \"react-router-dom\";\n\nconst User = (porps) => {\n  const { fname, lname } = useParams();\n  const loc = useLocation();\n  const history = useHistory();\n  console.log(history);\n\n  return (\n    <>\n      <h1>\n        Username is {porps.greet} {fname} {lname}\n      </h1>\n      <h3>My Location is :{loc.pathname}</h3>\n      {loc.pathname === `/user/Sameer/Goel` ? <button>WoW!!</button> : null}\n      <button onClick={() => history.goBack()}> Back</button>\n      <button onClick={() => history.push(\"/Contact\")}> ContactUs</button>\n    </>\n  );\n};\n\nexport default User;\n","import React from \"react\";\n\nconst SearchResult = (props) => {\n  const myimg = `https://source.unsplash.com/400x300?${props.searchString}`;\n  return (\n    <>\n      <div>\n        <img src={myimg} alt=\"myimg\" />\n      </div>\n    </>\n  );\n};\n\nexport default SearchResult;\n","import React, { useState } from \"react\";\nimport SearchResult from \"./SearchResult\";\n\nconst Search = () => {\n  const [img, setImg] = useState(\"\");\n\n  const inputEvent = (event) => {\n    setImg(event.target.value);\n  };\n\n  return (\n    <>\n      <div className=\"searchbar\">\n        <input\n          type=\"text\"\n          placeholder=\"type to search\"\n          value={img}\n          onChange={inputEvent}\n        />\n        <h3>{img}</h3>\n      </div>\n      {img === \"\" ? null : <SearchResult searchString={img} />}\n    </>\n  );\n};\n\nexport default Search;\n","import React from \"react\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport About from \"./About\";\nimport Contact from \"./Contact\";\nimport Error from \"./Error\";\nimport Navbar from \"./Navbar\";\nimport User from \"./User\";\nimport Search from \"./Search\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\n\nimport \"./App.css\";\n\nfunction App() {\n  const Name = () => {\n    return <h1 className=\"mt-5\">Welcome Sam</h1>;\n  };\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <Switch>\n        <Route exact path=\"/about\" component={() => <About name=\"Sameer\" />} />\n        <Route\n          exact\n          path=\"/contact\"\n          component={() => <Contact name=\"Sameer\" />}\n        />\n        <Route\n          path=\"/User/:fname/:lname\"\n          component={() => <User greet=\"Hey, \" />}\n        />\n        <Route exact path=\"/\" component={Name} />\n        <Route exact path=\"/search\" component={Search} />\n        <Route component={Error} />\n        {/* <Redirect to=\"/\" /> */}\n      </Switch>\n      {/* <About />\n      <Contact /> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}